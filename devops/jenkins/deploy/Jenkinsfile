pipeline {
  agent any
  options {
    ansiColor('xterm')
    disableConcurrentBuilds()
  }
  environment {
    SHORT_COMMIT = "${GIT_COMMIT[0..7]}"
  }
  stages {
    stage('Build') {
      steps {
        sh "composer install --no-interaction --ignore-platform-reqs"
        sh "tar --exclude=./devops -czf devops/ansible/roles/deployment/files/build.tar.gz ."
      }
    }
    stage('Deploy'){
      steps {
        dir('devops/ansible') {
          ansiblePlaybook(
            playbook: "deploy.yml",
            inventory: "inventories/${ENV}/hosts",
            credentialsId: "DEVOPS_RSA",
            vaultCredentialsId: "ANSIBLE_PASS",
            extraVars: [ app_ver: "${SHORT_COMMIT}" ]
          )
        }
      }
    }
  }
  post {
    success {
      script {
        REPORT_MSG = "Job ${env.JOB_NAME} has succeeded\n${currentBuild.getBuildCauses()[0].shortDescription}\nBuild: <${env.BUILD_URL}display/redirect|${env.BUILD_NUMBER}>\nEnv: ${env.ENV}\nBranch: ${env.GIT_BRANCH}\nTime: ${currentBuild.durationString.minus(' and counting')}"
      }
      mattermostSend(
        color: 'good',
        channel: "crm-deploys",
        icon: "https://i.pinimg.com/564x/e3/ba/82/e3ba820967cd9642403064f684a9afb2.jpg",
        message: REPORT_MSG,
        endpoint: "https://chat.travel-dev.com/hooks/wfkq819uzjnx8ne3htjnw9pimr"
      )
    }
    failure {
      script {
        REPORT_MSG = "Job ${env.JOB_NAME} has failed\n${currentBuild.getBuildCauses()[0].shortDescription}\nBuild: <${env.BUILD_URL}display/redirect|${env.BUILD_NUMBER}>\nEnv: ${env.ENV}\nBranch: ${env.GIT_BRANCH}\nTime: ${currentBuild.durationString.minus(' and counting')}"
      }
      mattermostSend(
        color: 'danger',
        channel: "crm-deploys",
        icon: "https://i.pinimg.com/564x/e3/ba/82/e3ba820967cd9642403064f684a9afb2.jpg",
        message: REPORT_MSG,
        endpoint: "https://chat.travel-dev.com/hooks/wfkq819uzjnx8ne3htjnw9pimr"
      )
    }
    always {
      cleanWs()
    }
  }
}
