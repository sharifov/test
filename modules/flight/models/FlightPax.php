<?php

namespace modules\flight\models;

use common\models\Language;
use modules\flight\src\entities\flightPax\serializer\FlightPaxSerializer;
use modules\flight\src\useCases\flightQuote\create\FlightPaxDTO;
use sales\entities\serializer\Serializable;
use Yii;
use yii\db\ActiveQuery;

/**
 * This is the model class for table "flight_pax".
 *
 * @property int $fp_id
 * @property int $fp_flight_id
 * @property string $fp_uid [varchar(15)]
 * @property int|null $fp_pax_id
 * @property string|null $fp_pax_type
 * @property string|null $fp_first_name
 * @property string|null $fp_last_name
 * @property string|null $fp_middle_name
 * @property string|null $fp_dob
 * @property string $fp_nationality [varchar(5)]
 * @property string $fp_gender [varchar(1)]
 * @property string $fp_email [varchar(100)]
 * @property string $fp_language [varchar(5)]
 * @property string $fp_citizenship [varchar(5)]
 *
 * @property Flight $fpFlight
 * @property FlightQuoteSegmentPaxBaggageCharge[] $flightQuoteSegmentPaxBaggageCharges
 * @property FlightQuoteTicket $flightQuoteTicket
 */
class FlightPax extends \yii\db\ActiveRecord implements Serializable
{
    public const PAX_ADULT = 'ADT';
    public const PAX_CHILD = 'CHD';
    public const PAX_INFANT = 'INF';

    public const PAX_LIST_ID = [
        self::PAX_ADULT => 1,
        self::PAX_CHILD => 2,
        self::PAX_INFANT => 3
    ];

    public const PAX_LIST = [
        self::PAX_LIST_ID[self::PAX_ADULT] => self::PAX_ADULT,
        self::PAX_LIST_ID[self::PAX_CHILD] => self::PAX_CHILD,
        self::PAX_LIST_ID[self::PAX_INFANT] => self::PAX_INFANT,
    ];

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'flight_pax';
    }

    public function beforeSave($insert): bool
    {
        if ($insert) {
            $this->fp_uid = $this->generateUid();
        }
        return parent::beforeSave($insert);
    }

    public function update($runValidation = true, $attributeNames = null)
    {
        return parent::update($runValidation, $attributeNames); // TODO: Change the autogenerated stub
    }

    public function save($runValidation = true, $attributeNames = null)
    {
        return parent::save($runValidation, $attributeNames); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['fp_flight_id'], 'required'],
            [['fp_flight_id', 'fp_pax_id'], 'integer'],
            [['fp_dob', 'fp_uid', 'fp_nationality', 'fp_gender', 'fp_email', 'fp_language', 'fp_citizenship'], 'safe'],
            [['fp_pax_type'], 'string', 'max' => 3],
            [['fp_uid'], 'string', 'max' => 15],
            [['fp_first_name', 'fp_last_name', 'fp_middle_name'], 'string', 'max' => 40],
            [['fp_flight_id'], 'exist', 'skipOnError' => true, 'targetClass' => Flight::class, 'targetAttribute' => ['fp_flight_id' => 'fl_id']],

            [['fp_nationality', 'fp_language', 'fp_citizenship'], 'string', 'max' => 5],

            [['fp_email'], 'string', 'max' => 100],
            [['fp_email'], 'email'],

            [['fp_gender'], 'string', 'max' => 1],

            [['fp_language'], 'exist', 'skipOnError' => true, 'skipOnEmpty' => true, 'targetClass' => Language::class, 'targetAttribute' => 'language_id'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'fp_id' => 'Fp ID',
            'fp_flight_id' => 'Fp Flight ID',
            'fp_pax_id' => 'Fp Pax ID',
            'fp_pax_type' => 'Fp Pax Type',
            'fp_first_name' => 'Fp First Name',
            'fp_last_name' => 'Fp Last Name',
            'fp_middle_name' => 'Fp Middle Name',
            'fp_dob' => 'Fp Dob',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getFpFlight()
    {
        return $this->hasOne(Flight::class, ['fl_id' => 'fp_flight_id']);
    }

    public function getFlightQuoteTicket(): ActiveQuery
    {
        return $this->hasOne(FlightQuoteTicket::class, ['fqt_pax_id' => 'fp_id']);
    }

    /**
     * {@inheritdoc}
     * @return \modules\flight\models\query\FlightPaxQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \modules\flight\models\query\FlightPaxQuery(static::class);
    }

    /**
     * @param FlightPaxDTO $dto
     * @return FlightPax
     */
    public static function create(FlightPaxDTO $dto): self
    {
        $flightPax = new self();

        $flightPax->fp_flight_id = $dto->flightId;
        $flightPax->fp_pax_id = $dto->paxId;
        $flightPax->fp_pax_type = $dto->paxType;
        $flightPax->fp_first_name = $dto->firstName;
        $flightPax->fp_last_name = $dto->lastName;
        $flightPax->fp_middle_name = $dto->middleName;
        $flightPax->fp_dob = $dto->dob;

        return $flightPax;
    }

    public static function createByParams(
        int $flightId,
        string $paxType,
        ?string $firstName = null,
        ?string $lastName = null,
        ?string $middleName = null,
        ?string $dob = null,
        ?string $gender = null,
        ?string $nationality = null,
        ?string $email = null
    ): FlightPax {
        $flightPax = new self();
        $flightPax->fp_flight_id = $flightId;
        $flightPax->fp_pax_type = $paxType;
        $flightPax->fp_first_name = $firstName;
        $flightPax->fp_last_name = $lastName;
        $flightPax->fp_middle_name = $middleName;
        $flightPax->fp_dob = $dob;
        $flightPax->fp_gender = $gender;
        $flightPax->fp_nationality = $nationality;
        $flightPax->fp_email = $email;
        return $flightPax;
    }

    /**
     * @return array
     */
    public static function getPaxListId(): array
    {
        return self::PAX_LIST_ID;
    }

    public static function getPaxList(): array
    {
        return self::PAX_LIST;
    }

    /**
     * @param string $type
     * @return int|null
     */
    public static function getPaxId(string $type): ?int
    {
        return self::getPaxListId()[$type] ?? null;
    }

    /**
     * @param int $id
     * @return string|null
     */
    public static function getPaxTypeById(int $id): ?string
    {
        return self::PAX_LIST[$id] ?? null;
    }

    /**
     * @return string
     */
    public function generateUid(): string
    {
        return uniqid('fp');
    }

    public function serialize(): array
    {
        return (new FlightPaxSerializer($this))->getData();
    }

    public function updateByOrderApiCreation(
        ?string $firstName,
        ?string $lastName,
        ?string $middleName,
        ?string $nationality,
        ?string $gender,
        ?string $birthDate,
        ?string $email,
        ?string $language,
        ?string $citizenship
    ): void {
        $this->fp_first_name = $firstName;
        $this->fp_last_name = $lastName;
        $this->fp_middle_name = $middleName;
        $this->fp_nationality = $nationality;
        $this->fp_gender = $gender;
        $this->fp_dob = $birthDate;
        $this->fp_email = $email;
        $this->fp_language = $language;
        $this->fp_citizenship = $citizenship;
    }

    public function fields(): array
    {
        return [
            'fp_uid',
            'fp_pax_id',
            'fp_pax_type',
            'fp_first_name',
            'fp_last_name',
            'fp_middle_name',
            'fp_dob'
        ];
    }
}
