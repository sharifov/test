<?php
namespace modules\rbacImportExport\src\rbac;

use yii\base\InvalidArgumentException;
use yii\base\InvalidCallException;
use yii\db\Exception;
use yii\db\Query;
use yii\helpers\ArrayHelper;
use yii\rbac\Item;
use yii\rbac\Permission;
use yii\rbac\Role;
use yii\rbac\Rule;

class DbManager extends \yii\rbac\DbManager
{
	/**
	 * {@inheritdoc}
	 */
	public function getRules()
	{
		if ($this->rules !== null) {
			return $this->rules;
		}

		$query = (new Query())->from($this->ruleTable);

		$rules = [];
		foreach ($query->all($this->db) as $row) {
			$data = $row['data'];
			if (is_resource($data)) {
				$data = stream_get_contents($data);
			}
			$rules[$row['name']] = unserialize($data);

			if (is_object($rules[$row['name']])) {
				$ref = new \ReflectionClass($rules[$row['name']]);
				$rules[$row['name']] = (object)  array_merge((array)$rules[$row['name']], ['class' => $ref->getNamespaceName() . '\\' . $ref->getShortName()]);
			}
		}
		$this->rules = $rules;
		return $rules;
	}

	public function getRulesNames(): array
	{
		if ($this->rules !== null) {
			return ArrayHelper::getColumn($this->rules, 'name');
		}

		$query = (new Query())->from($this->ruleTable);

		return ArrayHelper::getColumn($query->all($this->db), 'name');
	}

	public function getPermissionsByRole($roleName): array
	{
		$childrenList = $this->getChildrenList();
		$result = $childrenList[$roleName] ?? [];
		if (empty($result)) {
			return [];
		}
		$query = (new Query())->from($this->itemTable)->where([
			'type' => Item::TYPE_PERMISSION,
			'name' => array_values($result),
		]);
		$permissions = [];
		foreach ($query->all($this->db) as $row) {
			$permissions[$row['name']] = $this->populateItem($row);
		}

		return $permissions;
	}

	public function add($object)
	{
		return parent::add($object); // TODO: Change the autogenerated stub
	}

	/**
	 * {@inheritdoc}
	 */
	protected function addRule($rule)
	{
		$time = time();
		if ($rule->createdAt === null) {
			$rule->createdAt = $time;
		}
		if ($rule->updatedAt === null) {
			$rule->updatedAt = $time;
		}
		$this->db->createCommand()
			->insert($this->ruleTable, [
				'name' => $rule->name,
				'data' => serialize($rule),
				'created_at' => $rule->createdAt,
				'updated_at' => $rule->updatedAt,
			])->execute();

		$this->invalidateCache();

		return true;
	}

	/**
	 * @param array $rules
	 * @return int
	 * @throws \yii\db\Exception
	 */
	public function addBatchRules(array $rules): int
	{
		$batchRules = [];

		/**@var Rule $rule */
		foreach ($rules as $rule) {
			$batchRule = [];
			$time = time();
			if ($rule->createdAt === null) {
				$rule->createdAt = $time;
			}
			if ($rule->updatedAt === null) {
				$rule->updatedAt = $time;
			}
			$batchRule[] = $rule->name;
			$batchRule[] = serialize($rule);
			$batchRule[] = $rule->createdAt;
			$batchRule[] = $rule->updatedAt;

			$batchRules[] = $batchRule;
		}
		return $this->db->createCommand()->batchInsert($this->ruleTable, ['name', 'data', 'created_at', 'updated_at'], $batchRules)->execute();
	}

	public function addBatchPermissions(array $permissions, array $action): int
	{
		$batchPermissions = [];
		/** @var Permission $permission  */
		foreach ($permissions as $permission) {
			$batchPermission = [];

			$time = time();
			if ($permission->createdAt === null) {
				$permission->createdAt = $time;
			}
			if ($permission->updatedAt === null) {
				$permission->updatedAt = $time;
			}

			$batchPermission[] = $permission->name;
			$batchPermission[] = $permission->type;
			$batchPermission[] = $permission->description;
			$batchPermission[] = $permission->ruleName;
			$batchPermission[] = $permission->data;
			$batchPermission[] = $permission->createdAt;
			$batchPermission[] = $permission->updatedAt;

			if ($action[$permission->name] === 'update') {
				$this->db->createCommand()->update(
					$this->itemTable,
					[
						'description' => $permission->description,
						'rule_name' => $permission->ruleName,
						'data' => $permission->data
					],
					['name' => $permission->name])->execute();
			} else {
				$batchPermissions[] = $batchPermission;
			}
		}

		return $this->db->createCommand()->batchInsert($this->itemTable, ['name', 'type', 'description', 'rule_name', 'data', 'created_at', 'updated_at'], $batchPermissions)->execute();
	}

	public function addBatchChild(array $batch): int
	{
		$batchChild = [];
		foreach ($batch as $item) {
			/** @var Item $item[0]*/
			$parent = $item[0];

			/** @var Item $item[1] */
			$child = $item[1];

			if ($parent->name === $child->name) {
				throw new InvalidArgumentException("Cannot add '{$parent->name}' as a child of itself.");
			}

			if ($parent instanceof Permission && $child instanceof Role) {
				throw new InvalidArgumentException('Cannot add a role as a child of a permission.');
			}

			if ($this->detectLoop($parent, $child)) {
				throw new InvalidCallException("Cannot add '{$child->name}' as a child of '{$parent->name}'. A loop has been detected.");
			}

			if (!$this->hasChild($parent, $child)) {
				$batchChild[] = [
					$parent->name,
					$child->name
				];
			}
		}

		return $this->db->createCommand()->batchInsert($this->itemChildTable, ['parent', 'child'], $batchChild)->execute();
	}

	public function assignBatch(array $users, Role $role): int
	{
		$batchAssign = [];
		foreach ($users as $user) {
			$batchAssign[] = [
				$role->name,
				$user,
				time()
			];
		}
		return $this->db->createCommand()->batchInsert($this->assignmentTable, ['item_name', 'user_id', 'created_at'], $batchAssign)->execute();
	}
}