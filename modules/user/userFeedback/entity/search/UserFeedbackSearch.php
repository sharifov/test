<?php

namespace modules\user\userFeedback\entity\search;

use common\models\Employee;
use kartik\daterange\DateRangeBehavior;
use yii\base\Model;
use yii\data\ActiveDataProvider;
use modules\user\userFeedback\entity\UserFeedback;
use yii\data\SqlDataProvider;
use yii\db\Expression;

/**
 * UserFeedbackSearch represents the model behind the search form of `modules\user\userFeedback\entity\UserFeedback`.
 */
class UserFeedbackSearch extends UserFeedback
{
    public $createTimeRange;
    public $createTimeStart;
    public $createTimeEnd;

    public const CREATE_TIME_START_DEFAULT = '-7 days';

    public function __construct($config = [])
    {
        parent::__construct($config);
        $this->createTimeRange = date('Y-m-d 00:00:00', strtotime(self::CREATE_TIME_START_DEFAULT)) . ' - ' . date('Y-m-d 23:59:59');
    }

    /**
     * @return array
     */
    public function behaviors(): array
    {
        return [
            [
                'class' => DateRangeBehavior::class,
                'attribute' => 'createTimeRange',
                'dateStartAttribute' => 'createTimeStart',
                'dateEndAttribute' => 'createTimeEnd',
            ]
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['uf_id', 'uf_type_id', 'uf_status_id', 'uf_created_user_id', 'uf_updated_user_id'], 'integer'],
            [['uf_title', 'uf_message', 'uf_data_json', 'uf_created_dt', 'uf_updated_dt', 'createTimeRange'], 'safe'],
            [['createTimeRange'], 'match', 'pattern' => '/^.+\s\-\s.+$/'],
            [['createTimeRange'], 'validateRange', 'params' => ['minStartDate' => '2018-01-01 00:00:00', 'maxEndDate' => date("Y-m-d 23:59:59")]],
        ];
    }

    public function afterValidate()
    {
        parent::afterValidate(); // TODO: Change the autogenerated stub
        if ($this->createTimeRange) {
            $this->createTimeStart = date('Y-m-d H:i:00', $this->createTimeStart);
            $this->createTimeEnd = date('Y-m-d H:i:59', $this->createTimeEnd);
        } else {
            $this->createTimeStart = date('Y-m-d 00:00:00', strtotime(self::CREATE_TIME_START_DEFAULT));
            $this->createTimeEnd = date('Y-m-d H:i:59');
            $this->createTimeRange = $this->createTimeStart . ' - ' . $this->createTimeEnd;
        }
    }

    /**
     * {@inheritdoc}
     */
    public function scenarios()
    {
        // bypass scenarios() implementation in the parent class
        return Model::scenarios();
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function search($params)
    {
        $query = UserFeedback::find();

        // add conditions that should always apply here

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'sort' => ['defaultOrder' => ['uf_id' => SORT_DESC]],
            'pagination' => [
                'pageSize' => 20,
            ],
        ]);

        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            // $query->where('0=1');
            return $dataProvider;
        }

        // grid filtering conditions
        $query->andFilterWhere([
            'uf_id' => $this->uf_id,
            'uf_type_id' => $this->uf_type_id,
            'uf_status_id' => $this->uf_status_id,
            'uf_updated_dt' => $this->uf_updated_dt,
            'uf_created_user_id' => $this->uf_created_user_id,
            'uf_updated_user_id' => $this->uf_updated_user_id,
        ]);

        $query->andFilterWhere([
            'between',
            'uf_created_dt',
            Employee::convertTimeFromUserDtToUTC(strtotime($this->uf_created_dt.' 00:00:00')),
            Employee::convertTimeFromUserDtToUTC(strtotime($this->uf_created_dt.' 23:59:59'))
        ]);

        $query->andFilterWhere(['ilike', 'uf_title', $this->uf_title])
            ->andFilterWhere(['ilike', 'uf_message', $this->uf_message])
            ->andFilterWhere(['ilike', 'uf_data_json', $this->uf_data_json]);

        return $dataProvider;
    }

    public function graphSearch(): SqlDataProvider
    {
        $query = UserFeedback::find();

        $query->select([
            'date' => 'date(uf_created_dt)',
            'type' => 'uf_type_id',
            'totalFeedbackCnt' => 'count(*)'
        ]);

        $query->andWhere([
            'between',
            'uf_created_dt',
            Employee::convertTimeFromUserDtToUTC(strtotime($this->createTimeStart)),
            Employee::convertTimeFromUserDtToUTC(strtotime($this->createTimeEnd))
        ]);

        $query->groupBy([
            'date',
            'type'
        ]);

        return new SqlDataProvider(['sql' => $query->createCommand()->rawSql, 'pagination' => false, 'db' => UserFeedback::getDb()]);
    }

    public function getUserFeedbackStatusStats()
    {
        $query = UserFeedback::find();

        foreach (UserFeedback::getStatusList() as $statusId => $statusName) {
            $query->addSelect([
                $statusName => new Expression('sum(case when uf_status_id = ' . $statusId . ' then 1 else 0 end)')
            ]);
        }
        $query->andWhere([
            'between',
            'uf_created_dt',
            Employee::convertTimeFromUserDtToUTC(strtotime($this->createTimeStart)),
            Employee::convertTimeFromUserDtToUTC(strtotime($this->createTimeEnd))
        ]);

        return new SqlDataProvider(['sql' => $query->createCommand()->rawSql, 'pagination' => false, 'db' => UserFeedback::getDb()]);
    }


    public function validateRange($attribute, $params)
    {
        $range = explode(' - ', $this->$attribute);
        if ((count($range) == count($params)) == 2) {
            if (
                (strtotime(reset($range)) < strtotime(reset($params)) ||
                    strtotime(reset($range)) > strtotime(end($params))) ||

                (strtotime(end($range)) > strtotime(end($params)) ||
                    strtotime(end($range)) < strtotime(reset($params))) ||

                (strtotime(reset($range)) > strtotime(end($range)) ||
                    strtotime(end($range)) < strtotime(reset($range)))
            ) {
                $this->addError($attribute, 'Range start date or end date is incorrect');
            }
        } else {
            $this->addError($attribute, 'Range format or validation params set wrong');
        }
    }
}
