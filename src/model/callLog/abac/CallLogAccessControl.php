<?php

/**
 * Created by PhpStorm.
 * User: shakarim
 * Date: 6/30/22
 * Time: 2:14 PM
 */

namespace src\model\callLog\abac;

use yii\base\ActionFilter;
use yii\di\Instance;
use yii\web\ForbiddenHttpException;
use yii\web\User;

/**
 * Class CallLogAccessControl provides simple access control based on a set of rules.
 *
 * This class similar of `yii\filters\AccessControl` but appear the special filter implementation
 * for `src\model\callLog\abac\CallLogAbacObject` class;
 *
 * To use AccessControl, declare it in the `behaviors()` method of your controller class.
 * For example, the following declarations will check user access for `index` page in `abac` and will return
 * ForbiddenHttpException if not.
 *
 * ```php
 * ...
 * public function behaviors()
 * {
 *      return [
 *          'abac-access' => [
 *              'class' => CallLogAccessControl::class,
 *              'rules' => [
 *                  'index' => [
 *                      'object' => CallLogAbacObject::OBJECT_ACT_INDEX,
 *                      'action' => CallLogAbacObject::ACTION_ACCESS
 *                  ]
 *              ]
 *          ]
 *      ];
 * }
 * ...
 * ```
 *
 * In this example you can see that:
 *      - `index` is `id` of action
 *      - `object` is an object, that will be checked in abac module
 *      - `action` is an action, that will be used in access checking in abac module
 *
 * @package src\model\callLog\abac
 */
class CallLogAccessControl extends ActionFilter
{
    /**
     * @var array the default configuration of access rules. Individual rule configurations
     * specified via [[rules]] will take precedence when the same property of the rule is configured.
     */
    protected $ruleConfig = [
        'class' => 'src\model\callLog\abac\CallLogAccessRule'
    ];
    /**
     * @var array a list of access rule objects or configuration arrays for creating the rule objects.
     * If a rule is specified via a configuration array, it will be merged with [[ruleConfig]] first
     * before it is used for creating the rule object.
     * @see ruleConfig
     */
    public $rules;
    /**
     * @var User|array|string|false the user object representing the authentication status or the ID of the user application component.
     * Starting from version 2.0.2, this can also be a configuration array for creating the object.
     * Starting from version 2.0.12, you can set it to `false` to explicitly switch this component support off for the filter.
     */
    public $user = 'user';

    /**
     * Initializes the [[rules]] array by instantiating rule objects from configurations & user;
     *
     * @throws \yii\base\InvalidConfigException
     */
    public function init()
    {
        parent::init();
        if ($this->user !== false) {
            $this->user = Instance::ensure($this->user, User::class);
        }
        foreach ($this->rules as $i => $rule) {
            if (is_array($rule)) {
                $this->rules[$i] = \Yii::createObject(array_merge($this->ruleConfig, $rule));
            }
        }
    }

    /**
     * @param \yii\base\Action $action
     * @return bool
     * @throws ForbiddenHttpException
     */
    public function beforeAction($action)
    {
        if (!parent::beforeAction($action)) {
            return false;
        }

        /** @var \src\model\callLog\abac\CallLogAccessRule $rule */
        $rule = isset($this->rules[$action->id]) ? $this->rules[$action->id] : null;
        if ($rule instanceof $this->ruleConfig['class'] && !$rule->isAllow($this->user)) {
            throw new ForbiddenHttpException('You\'re not allowed to this page');
        }

        return true; // TODO: Change the autogenerated stub
    }
}
