<?php

namespace common\models;

use borales\extensions\phoneInput\PhoneInputValidator;
use common\models\query\UserProjectParamsQuery;
use src\access\CallAccess;
use src\model\emailList\entity\EmailList;
use src\model\phoneList\entity\PhoneList;
use src\model\userVoiceMail\entity\UserVoiceMail;
use src\model\userVoiceMail\entity\UserVoiceMailQuery;
use Yii;
use yii\behaviors\AttributeBehavior;
use yii\behaviors\TimestampBehavior;
use yii\caching\TagDependency;
use yii\db\ActiveQuery;
use yii\db\ActiveRecord;

/**
 * This is the model class for table "user_project_params".
 *
 * @property int $upp_user_id
 * @property int $upp_project_id
 * @property string $upp_email
 * @property string $upp_phone_number
 * @property string $upp_tw_phone_number
 * @property string $upp_created_dt
 * @property string $upp_updated_dt
 * @property int $upp_updated_user_id
 * @property bool $upp_allow_general_line
 * @property int $upp_dep_id
 * @property int|null $upp_phone_list_id
 * @property int|null $upp_email_list_id
 * @property bool|null $upp_vm_enabled
 * @property int|null $upp_vm_user_status_id
 * @property int|null $upp_vm_id
 *
 * @property Project $uppProject
 * @property Employee $uppUpdatedUser
 * @property Employee $uppUser
 * @property Department $uppDep
 * @property PhoneList $phoneList
 * @property EmailList $emailList
 * @property UserVoiceMail $voiceMail
 * @property bool $upp_allow_transfer [tinyint(1)]
 */
class UserProjectParams extends \yii\db\ActiveRecord
{
    public const VM_USER_STATUS_ONLINE = 1;
    public const VM_USER_STATUS_OFFLINE = 2;
    public const VM_USER_STATUS_ALL = 3;

    public const VM_USER_STATUS_LIST = [
        self::VM_USER_STATUS_ONLINE => 'online',
        self::VM_USER_STATUS_OFFLINE => 'offline',
        self::VM_USER_STATUS_ALL => 'all',
    ];

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'user_project_params';
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
//      CallAccess::flush($this->upp_user_id);
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['upp_user_id', 'upp_project_id'], 'required'],
            [['upp_user_id', 'upp_project_id', 'upp_updated_user_id', 'upp_dep_id'], 'integer'],
            [['upp_created_dt', 'upp_updated_dt'], 'safe'],
//            [['upp_email'], 'string', 'max' => 100],
//            [['upp_email'], 'trim'],
//            [['upp_email'], 'email'],



            ['upp_phone_number', 'string', 'max' => 30],
            [['upp_user_id', 'upp_project_id'], 'unique', 'targetAttribute' => ['upp_user_id', 'upp_project_id']],
            [['upp_project_id'], 'exist', 'skipOnError' => true, 'targetClass' => Project::class, 'targetAttribute' => ['upp_project_id' => 'id']],
            [['upp_updated_user_id'], 'exist', 'skipOnError' => true, 'targetClass' => Employee::class, 'targetAttribute' => ['upp_updated_user_id' => 'id']],
            [['upp_user_id'], 'exist', 'skipOnError' => true, 'targetClass' => Employee::class, 'targetAttribute' => ['upp_user_id' => 'id']],
            [['upp_dep_id'], 'exist', 'skipOnError' => true, 'targetClass' => Department::class, 'targetAttribute' => ['upp_dep_id' => 'dep_id']],
            ['upp_phone_number', PhoneInputValidator::class],

//            ['upp_tw_phone_number', PhoneInputValidator::class],
//            ['upp_tw_phone_number', 'unique', 'targetAttribute' => ['upp_tw_phone_number']], //, 'message' => 'Twillio Phone Number must be unique'],
//            ['upp_tw_phone_number', 'string', 'max' => 30],

            [['upp_allow_general_line', 'upp_allow_transfer'], 'boolean'],

            ['upp_phone_list_id', 'integer'],
            ['upp_phone_list_id', 'unique'],
            ['upp_phone_list_id', 'exist', 'skipOnError' => true, 'targetClass' => PhoneList::class, 'targetAttribute' => ['upp_phone_list_id' => 'pl_id']],

            ['upp_email_list_id', 'integer'],
            ['upp_email_list_id', 'unique'],
            ['upp_email_list_id', 'exist', 'skipOnError' => true, 'targetClass' => EmailList::class, 'targetAttribute' => ['upp_email_list_id' => 'el_id']],

            ['upp_vm_enabled', 'boolean'],
            ['upp_vm_user_status_id', 'in', 'range' => array_keys(self::VM_USER_STATUS_LIST)],
            ['upp_vm_id', 'in', 'range' => array_keys($this->getAvailableVoiceMail())],
        ];
    }

    public function vmIsOnline(): bool
    {
        return $this->upp_vm_user_status_id === self::VM_USER_STATUS_ONLINE;
    }

    public function vmIsOffline(): bool
    {
        return $this->upp_vm_user_status_id === self::VM_USER_STATUS_OFFLINE;
    }

    public function vmIsAll(): bool
    {
        return $this->upp_vm_user_status_id === self::VM_USER_STATUS_ALL || $this->upp_vm_user_status_id === null;
    }

    public function getAvailableVoiceMail(): array
    {
        if (!$this->upp_user_id) {
            return [];
        }
        return UserVoiceMailQuery::getListByUser($this->upp_user_id);
    }

    public function getVoiceMail(): ActiveQuery
    {
        return $this->hasOne(UserVoiceMail::class, ['uvm_id' => 'upp_vm_id']);
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'upp_user_id' => 'User',
            'upp_project_id' => 'Project',
            'upp_email' => 'Email',
            'upp_phone_number' => 'Old Phone Number',
            'upp_tw_phone_number' => 'Phone Number',
            'upp_created_dt' => 'Created Dt',
            'upp_updated_dt' => 'Updated Dt',
            'upp_updated_user_id' => 'Updated User',
            'upp_allow_general_line' => 'Allow General Line',
            'upp_allow_transfer' => 'Allow Call Transfer',
            'upp_dep_id' => 'Department',
            'upp_phone_list_id' => 'Phone List',
            'phoneList.pl_phone_number' => 'Phone List',
            'upp_email_list_id' => 'Email List',
            'emailList.el_email' => 'Email List',
            'upp_vm_enabled' => 'Voice mail enabled',
            'upp_vm_user_status_id' => 'Voice mail user status',
            'upp_vm_id' => 'Voice mail',
        ];
    }

    public function behaviors(): array
    {
        return [
            'timestamp' => [
                'class' => TimestampBehavior::class,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['upp_created_dt', 'upp_updated_dt'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['upp_updated_dt'],
                ],
                'value' => date('Y-m-d H:i:s') //new Expression('NOW()'),
            ],
            'attribute' => [
                'class' => AttributeBehavior::class,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['upp_updated_user_id'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['upp_updated_user_id'],
                ],
                'value' => isset(Yii::$app->user) ? Yii::$app->user->id : null,
            ],
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUppDep()
    {
        return $this->hasOne(Department::class, ['dep_id' => 'upp_dep_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUppProject()
    {
        return $this->hasOne(Project::class, ['id' => 'upp_project_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUppUpdatedUser()
    {
        return $this->hasOne(Employee::class, ['id' => 'upp_updated_user_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUppUser()
    {
        return $this->hasOne(Employee::class, ['id' => 'upp_user_id']);
    }

    public function getPhone(bool $onlyEnabled = false): ?string
    {
        if (!$this->phoneList) {
            return null;
        }
        if ($onlyEnabled) {
            if ($this->phoneList->pl_phone_number) {
                return $this->phoneList->pl_phone_number;
            }
            return null;
        }
        return $this->phoneList->pl_phone_number;
    }

    public function getPhoneList(): ActiveQuery
    {
        return $this->hasOne(PhoneList::class, ['pl_id' => 'upp_phone_list_id']);
    }

    public function getEmail(bool $onlyEnabled = false): ?string
    {
        if (!$this->emailList) {
            return null;
        }
        if ($onlyEnabled) {
            if ($this->emailList->el_enabled) {
                return $this->emailList->el_email;
            }
            return null;
        }
        return $this->emailList->el_email;
    }

    public function getEmailList(): ActiveQuery
    {
        return $this->hasOne(EmailList::class, ['el_id' => 'upp_email_list_id']);
    }

    /**
     * {@inheritdoc}
     * @return UserProjectParamsQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new UserProjectParamsQuery(static::class);
    }
}
