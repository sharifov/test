<?php

namespace modules\user\userFeedback\entity;

use Yii;
use yii\base\InvalidConfigException;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\db\Connection;

/**
 * This is the model class for table "user_feedback_file".
 *
 * @property int $uff_id
 * @property int $uff_uf_id
 * @property string $uff_mimetype
 * @property int|null $uff_size
 * @property string|null $uff_filename
 * @property string|null $uff_title
 * @property resource $uff_blob
 * @property string|null $uff_created_dt
 * @property int|null $uff_created_user_id
 */
class UserFeedbackFile extends ActiveRecord
{
    public function behaviors(): array
    {
        return [
            'timestamp' => [
                'class' => TimestampBehavior::class,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['uff_created_dt'],
                ],
                'value' => date('Y-m-d H:i:s'),
            ],
            'user' => [
                'class' => BlameableBehavior::class,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['uff_created_user_id'],
                ]
            ]
        ];
    }

    /**
     * @return string
     */
    public static function tableName(): string
    {
        return 'user_feedback_file';
    }

    /**
     * @return Connection the database connection used by this AR class.
     * @throws InvalidConfigException
     */
    public static function getDb(): Connection
    {
        return Yii::$app->get('db_postgres');
    }

    /**
     * @return array
     */
    public function rules()
    {
        return [
            [['uff_uf_id', 'uff_mimetype', 'uff_blob'], 'required'],
            [['uff_uf_id', 'uff_size', 'uff_created_user_id'], 'default', 'value' => null],
            [['uff_uf_id', 'uff_size', 'uff_created_user_id'], 'integer'],
            [['uff_blob'], 'string'],
            [['uff_created_dt'], 'safe'],
            [['uff_mimetype'], 'string', 'max' => 100],
            [['uff_filename', 'uff_title'], 'string', 'max' => 255],
        ];
    }

    /**
     * @return string[]
     */
    public function attributeLabels(): array
    {
        return [
            'uff_id' => 'File ID',
            'uff_uf_id' => 'Feedback ID',
            'uff_mimetype' => 'MimeType',
            'uff_size' => 'Size',
            'uff_filename' => 'FileName',
            'uff_title' => 'Title',
            'uff_blob' => 'Blob',
            'uff_created_dt' => 'Created Dt',
            'uff_created_user_id' => 'Created User ID',
        ];
    }

    public function beforeSave($insert)
    {
        [$h, $data] =  explode(',', $this->uff_blob);
        if ($this->uff_blob && $data) {
            $this->uff_blob = bin2hex(base64_decode($data));
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public static function create(
        string $mimeType,
        int $size,
        string $filename,
        string $title,
        string $base64Img
    ): self {
        $self = new self();
        $self->uff_mimetype = $mimeType;
        $self->uff_size = $size;
        $self->uff_filename = $filename;
        $self->uff_title = $title;
        $self->uff_blob = $base64Img;
        return $self;
    }

    public function getImageSrc(): ?string
    {
        if (!empty($this->uff_blob) && !empty($this->uff_mimetype)) {
            $value = 'data:' . $this->uff_mimetype . ';base64,' . base64_encode(hex2bin(stream_get_contents($this->uff_blob, -1, 0)));
        } else {
            $value = '';
        }
        return $value;
    }
}
