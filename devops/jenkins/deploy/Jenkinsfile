pipeline {
  agent any
  options {
    ansiColor('xterm')
    disableConcurrentBuilds()
    withAWS(credentials: "aws-${ENV}")
  }
  environment {
    PROJECT = 'crm'
    GIT_KEY = 'git-crm'
    S3 = 'jenkins-infra-traveldev'
    VER = "${GIT_COMMIT[0..6]}"
  }
  stages {
    stage('Build') {
      when {
        not {
          expression {
            return s3DoesObjectExist(bucket: "${S3}", path: "${PROJECT}/${VER}.tar.gz")
          }
        }
      }
      steps {
        sshagent(credentials: ["${GIT_KEY}"]) {
          sh 'composer install --no-interaction --ignore-platform-reqs'
        }
        sh "tar --exclude=./.git --exclude=./devops -czf devops/${VER}.tar.gz ."
        s3Upload(file: "devops/${VER}.tar.gz", bucket: "$S3", path: "${PROJECT}/")
      }
    }
    stage('Deploy') {
      steps {
        dir('devops/ansible') {
          ansiblePlaybook(
            playbook: 'deploy.yml',
            inventory: "inventories/${ENV}/aws_ec2.yml",
            credentialsId: "ssh-${ENV}",
            vaultCredentialsId: "vault-${ENV}",
            extraVars: [ app_ver: "${VER}" ]
          )
        }
      }
    }
  }
  post {
    success {
      script {
        if (env.ENV == 'prod') {
          slackSend(
            color: 'good',
            tokenCredentialId: 'slack-deploys',
            message: "*${env.JOB_NAME}*\n${currentBuild.getBuildCauses()[0].shortDescription}\nStatus: ${currentBuild.result}\nBuild: <${BUILD_URL}display/redirect|${BUILD_NUMBER}>\nEnv: ${ENV}\nBranch: ${GIT_BRANCH.replaceFirst(/^.*\//, '')}\nVersion: ${VER}\nTime: ${currentBuild.durationString.minus(' and counting')}"
          )
        }
      }
      slackSend(
        color: 'good',
        tokenCredentialId: 'slack-${PROJECT}-deploys',
        message: "*${env.JOB_NAME}*\n${currentBuild.getBuildCauses()[0].shortDescription}\nStatus: ${currentBuild.result}\nBuild: <${BUILD_URL}display/redirect|${BUILD_NUMBER}>\nEnv: ${ENV}\nBranch: ${GIT_BRANCH.replaceFirst(/^.*\//, '')}\nVersion: ${VER}\nTime: ${currentBuild.durationString.minus(' and counting')}"
      )
    }
    failure {
      slackSend(
        color: 'danger',
        tokenCredentialId: "slack-${PROJECT}-deploys",
        message: "*${env.JOB_NAME}*\n${currentBuild.getBuildCauses()[0].shortDescription}\nStatus: ${currentBuild.result}\nBuild: <${BUILD_URL}display/redirect|${BUILD_NUMBER}>\nEnv: ${ENV}\nBranch: ${GIT_BRANCH.replaceFirst(/^.*\//, '')}\nVersion: ${VER}\nTime: ${currentBuild.durationString.minus(' and counting')}"
      )
    }
    always {
      cleanWs()
    }
  }
}
