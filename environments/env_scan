#!/usr/bin/env php
<?php
/**
 * Yii Environment Scan Tool
 *
 * In order to run in non-interactive mode:
 *
 */

$params = getParams();
$root = str_replace('\\', '/', __DIR__);
$tplEnvFile = 'env.conf.tpl';
$env['skipFiles'] = ['index.php', 'env.conf', $tplEnvFile, 'env_scan'];

echo "Yii Environment Scan Tool v1.0\n\n";
echo "... Start scan keys: " . date('H:i:s'). " ...\n";
$files = getFileList("$root/");
if (isset($env['skipFiles'])) {
    $skipFiles = $env['skipFiles'];
    array_walk($skipFiles, function(&$value) use($env, $root) { $value = "$root/$value"; });
    $files = array_diff($files, array_intersect_key($env['skipFiles'], array_filter($skipFiles, 'file_exists')));
}

$envList = getEnvironmentList($root, $files);

if (saveEnvironmentList($envList, $root, $tplEnvFile) ) {
    echo formatMessage("Data was successfully saved to file \"$root/$tplEnvFile\" !", ['fg-green']) . " \n";
} else {
    printError("Error Operation save Environment file\n");
}

//print_r($envList);

echo "... Scan completed ...\n";

function getFileList($root, $basePath = '')
{
    //echo $root; exit;
    $files = [];
    $handle = opendir($root);
    while (($path = readdir($handle)) !== false) {
        if ($path === '.git' || $path === '.svn' || $path === '.' || $path === '..') {
            continue;
        }
        $fullPath = "$root/$path";
        $relativePath = $basePath === '' ? $path : "$basePath/$path";
        if (is_dir($fullPath)) {
            $files = array_merge($files, getFileList($fullPath, $relativePath));
        } else {
            $files[] = $relativePath;
        }
    }
    closedir($handle);
    return $files;
}

function copyFile($root, $source, $target, &$all, $params)
{
    if (!is_file($root . '/' . $source)) {
        echo "       skip $target ($source not exist)\n";
        return true;
    }
    if (is_file($root . '/' . $target)) {
        if (file_get_contents($root . '/' . $source) === file_get_contents($root . '/' . $target)) {
            echo "  unchanged $target\n";
            return true;
        }
        if ($all) {
            echo "  overwrite $target\n";
        } else {
            echo "      exist $target\n";
            echo "            ...overwrite? [Yes|No|All|Quit] ";


            $answer = !empty($params['overwrite']) ? $params['overwrite'] : trim(fgets(STDIN));
            if (!strncasecmp($answer, 'q', 1)) {
                return false;
            } else {
                if (!strncasecmp($answer, 'y', 1)) {
                    echo "  overwrite $target\n";
                } else {
                    if (!strncasecmp($answer, 'a', 1)) {
                        echo "  overwrite $target\n";
                        $all = true;
                    } else {
                        echo "       skip $target\n";
                        return true;
                    }
                }
            }
        }
        file_put_contents($root . '/' . $target, file_get_contents($root . '/' . $source));
        return true;
    }
    echo "   generate $target\n";
    @mkdir(dirname($root . '/' . $target), 0777, true);
    file_put_contents($root . '/' . $target, file_get_contents($root . '/' . $source));
    return true;
}

function getParams()
{
    $rawParams = [];
    if (isset($_SERVER['argv'])) {
        $rawParams = $_SERVER['argv'];
        array_shift($rawParams);
    }

    $params = [];
    foreach ($rawParams as $param) {
        if (preg_match('/^--(\w+)(=(.*))?$/', $param, $matches)) {
            $name = $matches[1];
            $params[$name] = isset($matches[3]) ? $matches[3] : true;
        } else {
            $params[] = $param;
        }
    }
    return $params;
}


function getEnvironmentList($root, $paths)
{
    $envList = [];
    foreach ($paths as $n => $file) {

        $fileName = $root . '/' . $file;
        $content = file_get_contents($fileName);

        $matches = [];
        preg_match_all('~\{\{(.*)\}\}~U', $content, $matches);
        $count = 0;
        if (!empty($matches[1])) {
            foreach ($matches[1] as $key) {
                $key = trim($key);
                $keyVal = $key;
                $keyArray = explode(':', $key);
                if ($keyArray && !empty($keyArray[1])) {
                    if (in_array($keyArray[1], ['bool', 'int', 'str'])) {
                        $keyVal = $keyArray[0];
                    }
                }

                $envList[$key] = '{{ ' . str_replace('.', '_', $keyVal) . ' }}';
            }
            $count = count($matches[1]);
        }
        if ($count) {
            echo formatMessage($n . '. "' . $file . '" => ' . $count . " keys \n", ['fg-blue']);
        }
    }
    return $envList;
}

function saveEnvironmentList($envList = [], $root, $file)
{
    $lines = [];
    foreach ($envList as $key => $value) {
        $lines[] = $key . '=' . $value;
    }
    $file = $root . '/' . $file;
    $content = implode("\r\n", $lines);
    return file_put_contents($file, $content);
}


/**
 * Prints error message.
 * @param string $message message
 */
function printError($message)
{
    echo "\n  " . formatMessage("Error. $message", ['fg-red']) . " \n";
}

/**
 * Returns true if the stream supports colorization. ANSI colors are disabled if not supported by the stream.
 *
 * - windows without ansicon
 * - not tty consoles
 *
 * @return boolean true if the stream supports ANSI colors, otherwise false.
 */
function ansiColorsSupported()
{
    return DIRECTORY_SEPARATOR === '\\'
        ? getenv('ANSICON') !== false || getenv('ConEmuANSI') === 'ON'
        : function_exists('posix_isatty') && @posix_isatty(STDOUT);
}

/**
 * Get ANSI code of style.
 * @param string $name style name
 * @return integer ANSI code of style.
 */
function getStyleCode($name)
{
    $styles = [
        'bold' => 1,
        'fg-black' => 30,
        'fg-red' => 31,
        'fg-green' => 32,
        'fg-yellow' => 33,
        'fg-blue' => 34,
        'fg-magenta' => 35,
        'fg-cyan' => 36,
        'fg-white' => 37,
        'bg-black' => 40,
        'bg-red' => 41,
        'bg-green' => 42,
        'bg-yellow' => 43,
        'bg-blue' => 44,
        'bg-magenta' => 45,
        'bg-cyan' => 46,
        'bg-white' => 47,
    ];
    return $styles[$name];
}

/**
 * Formats message using styles if STDOUT supports it.
 * @param string $message message
 * @param string[] $styles styles
 * @return string formatted message.
 */
function formatMessage($message, $styles)
{
    if (empty($styles) || !ansiColorsSupported()) {
        return $message;
    }

    return sprintf("\x1b[%sm", implode(';', array_map('getStyleCode', $styles))) . $message . "\x1b[0m";
}
