---
- name: Create application dir
  file:
    dest: "{{ web_dir }}/{{ app_ver }}"
    state: directory
    owner: "{{ web_user }}"
    group: "{{ web_user }}"
    mode: 0755

- name: Check local build
  stat:
    path: "{{ web_dir }}/{{ app_ver }}/init"
  register: build

- name: Pull build artifact
  aws_s3:
    bucket: "{{ s3_artifact_bucket }}"
    object: "{{ project }}/{{ app_ver }}.tar.gz"
    dest: "/tmp/{{ app_ver }}.tar.gz"
    mode: get
    aws_access_key: "{{ s3_artifact_access_key }}"
    aws_secret_key: "{{ s3_artifact_secret_key }}"
  when: not build.stat.exists

- name: Extract application artifact
  unarchive:
    src: "/tmp/{{ app_ver }}.tar.gz"
    dest: "{{ web_dir }}/{{ app_ver }}"
    owner: "{{ web_user }}"
    group: "{{ web_user }}"
    creates: "{{ web_dir }}/{{ app_ver }}/init"
    remote_src: true

- name: Delete build artifact
  file:
    path: "/tmp/{{ app_ver }}.tar.gz"
    state: absent

- name: Create dotenv
  template:
    src: env.j2
    dest: "{{ web_dir }}/{{ app_ver }}/.env"
    owner: "{{ web_user }}"
    group: "{{ web_user }}"
    mode: 0644

- name: Init application
  command: "php init --env={{ env_name }} --overwrite=All"
  args:
    chdir: "{{ web_dir }}/{{ app_ver }}"
  become_user: "{{ web_user }}"
  changed_when: false

- name: Run migrations
  command: 'php yii migrate --interactive=0'
  args:
    chdir: "{{ web_dir }}/{{ app_ver }}"
  become: true
  become_user: "{{ web_user }}"
  run_once: true
  register: result
  changed_when: false

- name: Print migration result
  debug:
    var: result

- name: Start virtual-cron
  command: 'php yii virtual-cron/cron/start'
  args:
    chdir: "{{ web_dir }}/{{ app_ver }}"
  become: true
  become_user: "{{ web_user }}"
  run_once: true
  register: result
  changed_when: false

- name: Print virtual-cron result
  debug:
    var: result

- name: Scan ABAC
  command: 'php yii abac/scan'
  args:
    chdir: "{{ web_dir }}/{{ app_ver }}"
  become: true
  become_user: "{{ web_user }}"
  run_once: true
  register: result
  changed_when: false

- name: Print abac/scan result
  debug:
    var: result

- name: Get current symlink target
  stat:
    path: "{{ app_dir }}"
  register: sym

- name: Enable new release
  file:
    src: "{{ web_dir }}/{{ app_ver }}"
    dest: "{{ app_dir }}"
    state: link
    owner: "{{ web_user }}"
    group: "{{ web_user }}"
    force: true

- name: "Create {{ app_console_logfile_path }}"
  file:
    path: "{{ app_console_logfile_path }}"
    owner: "{{ web_user }}"
    group: "{{ web_user }}"
    recurse: true
    state: directory
    mode: '0777'

- name: Create logs for supervisord
  file:
    path: "{{ web_dir }}/{{ app_ver }}/console/runtime/logs/{{ item }}"
    owner: "{{ web_user }}"
    group: "{{ web_user }}"
    state: touch
    mode: '0664'
  with_items:
    - queue-client-chat-job.log
    - queue-email-job.log
    - queue-job.log
    - queue-lead-redial.log
    - queue-phone-check.log
    - queue-sms-job.log
    - queue-system-services.log
    - queue-virtual-cron-worker.log
    - socket-server.log
    - queue-db.log

- name: Restart supervisord service
  service:
    name: supervisor
    state: restarted

- name: Find old releases
  find:
    paths: "{{ web_dir }}"
    file_type: directory
    excludes:
      - "{{ sym.stat.lnk_target | basename }}"
  register: result
  when:
    - sym.stat.exists
    - sym.stat.lnk_target

- name: Keep last 3 releases
  file:
    path: "{{ item.path }}"
    state: absent
  with_items:
    - "{{ (result.files | sort(attribute='ctime'))[:-3] }}"
  when: sym.stat.exists
