<?php

namespace common\models;

use common\components\TwoFactorService;
use src\useCase\login\twoFactorAuth\TwoFactorAuthFactory;
use Yii;
use yii\base\Model;

/**
 * Class LoginStepTwoForm
 *
 * @property string $secret_key
 * @property bool $rememberMe
 * @property Employee $user
 */
class LoginStepTwoForm extends Model
{
    public $twoFactorMethod;

    public $rememberMe;

    private $user;

    /**
     * @return array
     */
    public function rules()
    {
        return [
            [['twoFactorMethod'], 'required'],
            [['twoFactorMethod'], 'integer'],
            [['twoFactorMethod'], 'in', 'range' => array_keys(TwoFactorAuthFactory::LIST)],
            [['twoFactorMethod'], 'validateThroughAbac'],
        ];
    }

//    public function load($data, $formName = null): bool
//    {
//        $load =  parent::load($data, $formName); // TODO: Change the autogenerated stub
//        $twoFactorLoad = false;
//        if ($this->twoFactorMethod) {
//            $twoFactorLoad = (TwoFactorAuthFactory::getFormByMethod($this->twoFactorMethod))->load($data);
//        }
//        return $load && $twoFactorLoad;
//    }

//    public function validate($attributeNames = null, $clearErrors = true): bool
//    {
//        $validate = parent::validate($attributeNames, $clearErrors); // TODO: Change the autogenerated stub
//        $twoFactorValidate = false;
//        if (!$this->hasErrors() && $this->twoFactorMethod) {
//            $twoFactorForm = TwoFactorAuthFactory::getFormByMethod($this->twoFactorMethod);
//            if (!$twoFactorForm->validate()) {
//                $this->addError('general', $twoFactorForm->getErrorSummary(true)[0]);
//            } else {
//                $twoFactorValidate = true;
//            }
//        }
//        return $validate && $twoFactorValidate;
//    }

    /**
     * @param string $email
     * @param bool $rememberMe
     * @return bool
     */
    public function login(Employee $user): bool
    {
        $isLogin = Yii::$app->user->login($user, $this->rememberMe ? 3600 * 24 * 30 : 0);
        if ($isLogin) {
            LoginForm::sendWsIdentityCookie(Yii::$app->user->identity, $this->rememberMe ? 3600 * 24 * 30 : 0);
//            $this->saveDataAfterLogin($user);
        }
        return $isLogin;
    }

    /**
     * @param Employee $user
     */
    private function saveDataAfterLogin(Employee $user): void
    {
        $userProfile = $user->userProfile;
        $userProfile->up_2fa_secret = $this->twoFactorAuthKey;
        $userProfile->save();
    }
//
//    /**
//     * @param string $twoFactorKey
//     * @return LoginStepTwoForm
//     */
//    public function setTwoFactorAuthKey(string $twoFactorAuthKey): LoginStepTwoForm
//    {
//        $this->twoFactorAuthKey = $twoFactorAuthKey;
//        return $this;
//    }

    /**
     * @param bool $rememberMe
     * @return LoginStepTwoForm
     */
    public function setRememberMe(bool $rememberMe): self
    {
        $this->rememberMe = $rememberMe;
        return $this;
    }

    public function setUser(Employee $user): self
    {
        $this->user = $user;
        return $this;
    }

    public function validateThroughAbac($attribute): bool
    {
        if (!$this->hasErrors()) {
            if (!TwoFactorAuthFactory::getGuard($this->twoFactorMethod)->guardMethod($this->user)) {
                $this->addError($attribute, 'You dont have access to login through ' . (TwoFactorAuthFactory::LIST[$this->twoFactorMethod]));
                return false;
            }
        }
        return true;
    }
}
