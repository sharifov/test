<?php

namespace sales\model\saleTicket\entity;

use common\models\CaseSale;
use common\models\Employee;
use sales\entities\cases\Cases;
use sales\model\saleTicket\useCase\create\SaleTicketCreateDTO;
use Yii;
use yii\behaviors\AttributeBehavior;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;

/**
 * This is the model class for table "sale_ticket".
 *
 * @property int $st_id
 * @property int $st_case_id
 * @property int $st_case_sale_id
 * @property string|null $st_ticket_number
 * @property string|null $st_record_locator
 * @property string|null $st_client_name
 * @property string|null $st_original_fop
 * @property string|null $st_charge_system
 * @property int|null $st_penalty_type
 * @property float|null $st_penalty_amount
 * @property float|null $st_selling
 * @property float|null $st_service_fee
 * @property float|null $st_recall_commission
 * @property float|null $st_markup
 * @property float|null $st_upfront_charge
 * @property float|null $st_refundable_amount
 * @property string|null $st_created_dt
 * @property string|null $st_updated_dt
 * @property int|null $st_created_user_id
 * @property int|null $st_updated_user_id
 * @property string $st_transaction_ids
 *
 * @property CaseSale $stCaseSale
 * @property Cases $stCase
 * @property Employee $stCreatedUser
 * @property Employee $stUpdatedUser
 */
class SaleTicket extends \yii\db\ActiveRecord
{
	private const AIRLINE_PENALTY_W 	= 1;
	private const AIRLINE_PENALTY_WIC 	= 2;
	private const AIRLINE_PENALTY_APFR 	= 3;
	private const AIRLINE_PENALTY_CA 	= 4;
	private const AIRLINE_PENALTY_NP 	= 5;

	private const AIRLINE_PENALTY_LIST = [
		self::AIRLINE_PENALTY_W 	=> 'Waived',
		self::AIRLINE_PENALTY_WIC 	=> 'Waived, if cancelled',
		self::AIRLINE_PENALTY_APFR 	=> 'As per fare rules',
		self::AIRLINE_PENALTY_CA 	=> 'Contact Airline',
		self::AIRLINE_PENALTY_NP 	=> 'Not permitted'
	];

	private const CHARGE_SYSTEM_VALUE_LIST = [
		'Stripe',
		'Auth.net Capital',
		'Auth.net',
		'Authorize.net(CapitalOne)',
		'Authorize.net'
	];

	public function beforeSave($insert)
	{
		$this->st_upfront_charge = $this->calculateUpfrontCharge();
		$this->st_refundable_amount = $this->calculateRefundableAmount();
		return parent::beforeSave($insert); // TODO: Change the autogenerated stub
	}

	public function beforeValidate()
	{
		if (preg_match('/^[+-]?\d+(?:\.\d+)?$/', $this->st_penalty_amount)) {
			$this->st_penalty_amount = (string)((float)$this->st_penalty_amount);
		}

		return parent::beforeValidate(); // TODO: Change the autogenerated stub
	}

	public function behaviors(): array
	{
		return [
			'timestamp' => [
				'class' => TimestampBehavior::class,
				'attributes' => [
					ActiveRecord::EVENT_BEFORE_INSERT => ['st_created_dt', 'st_updated_dt'],
					ActiveRecord::EVENT_BEFORE_UPDATE => ['st_updated_dt'],
				],
				'value' => date('Y-m-d H:i:s'),
			],
			'attribute' => [
				'class' => AttributeBehavior::class,
				'attributes' => [
					ActiveRecord::EVENT_BEFORE_INSERT => ['st_created_user_id', 'st_updated_user_id'],
					ActiveRecord::EVENT_BEFORE_UPDATE => ['st_updated_user_id'],
				],
				'value' => \Yii::$app->user->id ?? null,
			],
		];
	}

	public function rules(): array
    {
        return [
            ['st_id', 'integer'],
            [['st_case_id', 'st_case_sale_id'], 'exist', 'skipOnError' => true, 'targetClass' => CaseSale::class, 'targetAttribute' => ['st_case_id' => 'css_cs_id', 'st_case_sale_id' => 'css_sale_id']],

            ['st_case_id', 'required'],
            ['st_case_id', 'integer'],

            ['st_case_sale_id', 'required'],
            ['st_case_sale_id', 'integer'],

            ['st_charge_system', 'string'],

            ['st_created_dt', 'safe'],

            ['st_created_user_id', 'integer'],
            ['st_created_user_id', 'exist', 'skipOnError' => true, 'targetClass' => Employee::class, 'targetAttribute' => ['st_created_user_id' => 'id']],

            ['st_markup', 'number', 'max' => 999719.99],

            ['st_client_name', 'string', 'max' => 50],

            ['st_original_fop', 'string', 'max' => 5],

            ['st_penalty_amount', 'string', 'max' => 50],
            ['st_penalty_amount', 'trim'],

            ['st_penalty_type', 'integer'],

            ['st_recall_commission', 'number'],

            ['st_record_locator', 'string', 'max' => 8],

            ['st_refundable_amount', 'number'],

            ['st_selling', 'number'],

            ['st_service_fee', 'number'],

            ['st_ticket_number', 'string', 'max' => 30],

            ['st_updated_dt', 'safe'],

            ['st_updated_user_id', 'integer'],
            ['st_updated_user_id', 'exist', 'skipOnError' => true, 'targetClass' => Employee::class, 'targetAttribute' => ['st_updated_user_id' => 'id']],

            ['st_upfront_charge', 'number'],

            ['st_transaction_ids', 'string']
        ];
    }

    public function getStCaseSale(): \yii\db\ActiveQuery
    {
        return $this->hasOne(CaseSale::class, ['css_cs_id' => 'st_case_id', 'css_sale_id' => 'st_case_sale_id']);
    }

    public function getStCase(): \yii\db\ActiveQuery
    {
        return $this->hasOne(Cases::class, ['cs_id' => 'st_case_id']);
    }

    public function getStCreatedUser(): \yii\db\ActiveQuery
    {
        return $this->hasOne(Employee::class, ['id' => 'st_created_user_id']);
    }

    public function getStUpdatedUser(): \yii\db\ActiveQuery
    {
        return $this->hasOne(Employee::class, ['id' => 'st_updated_user_id']);
    }

    public function attributeLabels(): array
    {
        return [
            'st_id' => 'ID',
            'st_case_id' => 'Case ID',
            'st_case_sale_id' => 'Case Sale ID',
            'st_ticket_number' => 'Ticket Number',
            'st_client_name' => 'Client Name',
            'st_record_locator' => 'Record Locator',
            'st_original_fop' => 'Original Fop',
            'st_charge_system' => 'Charge System',
            'st_penalty_type' => 'Penalty Type',
            'st_penalty_amount' => 'Penalty Amount',
            'st_selling' => 'Selling',
            'st_service_fee' => 'Service Fee',
            'st_recall_commission' => 'Recall Commission',
            'st_markup' => 'Markup',
            'st_upfront_charge' => 'Upfront Charge',
            'st_refundable_amount' => 'Refundable Amount',
            'st_created_dt' => 'Created Dt',
            'st_updated_dt' => 'Updated Dt',
            'st_created_user_id' => 'Created User ID',
            'st_updated_user_id' => 'Updated User ID',
            'st_transaction_ids' => 'Transaction IDs',
        ];
    }

    public static function find(): Scopes
    {
        return new Scopes(static::class);
    }

    public static function tableName(): string
    {
        return 'sale_ticket';
    }

	private function calculateUpfrontCharge()
	{
		if (in_array($this->st_original_fop, ['CC', 'SPLIT', 'SPLT'])) {
			return $this->st_recall_commission + $this->st_markup - $this->st_service_fee;
		}
		return 0;
	}

	private function calculateRefundableAmount()
	{
		if (in_array($this->st_original_fop, ['CP', 'CK', 'VCC'])) {
			return $this->st_selling - $this->st_recall_commission - $this->st_markup - $this->getPenaltyAmountNumberValue();
		}
		return $this->st_selling - $this->getPenaltyAmountNumberValue() - $this->st_service_fee;
	}

	private function getPenaltyAmountNumberValue(): float
	{
		if (preg_match('/^[+-]?\d+(?:\.\d+)?$/', $this->st_penalty_amount)) {
			return (float)$this->st_penalty_amount;
		}
		return 0.00;
	}

	public static function createBySaleData(SaleTicketCreateDTO $dto): SaleTicket
	{
		$ticket = new self();

		$ticket->st_case_id = $dto->caseId;
		$ticket->st_case_sale_id = $dto->caseSaleId;
		$ticket->st_ticket_number = $dto->ticketNumber;
		$ticket->st_client_name = $dto->clientName;
		$ticket->st_record_locator = $dto->recordLocator;
		$ticket->st_original_fop = $dto->originalFop;
		$ticket->st_charge_system = $dto->chargeSystem;
		$ticket->st_penalty_type = $dto->penaltyType;
		$ticket->st_penalty_amount = $dto->penaltyAmount;
		$ticket->st_selling = $dto->selling;
		$ticket->st_service_fee = $dto->serviceFee;
		$ticket->st_recall_commission = $dto->recallCommission;
		$ticket->st_markup = $dto->markup;
		$ticket->st_transaction_ids = $dto->transactionIds;

		return $ticket;
	}

	public function isNeedAdditionalInfoForEmail(): bool
	{
		return (((in_array($this->st_original_fop, ['CK', 'CP']) && in_array($this->st_charge_system, self::CHARGE_SYSTEM_VALUE_LIST, false)) || $this->st_original_fop === 'VCC'));
	}

	public static function getAirlinePenaltyList(): array
	{
		return self::AIRLINE_PENALTY_LIST;
	}

	public static function getPenaltyTypeId(string $penaltyType): ?int
	{
		return array_search($penaltyType, self::getAirlinePenaltyList(), false) ?: null;
	}

	public static function getPenaltyTypeName(?int $id): ?string
	{
		return self::getAirlinePenaltyList()[$id] ?? '';
	}

	public function getFormattedOriginalFop(): string
	{
		return $this->st_original_fop === 'CP' ? 'CK' : $this->st_original_fop;
	}
}
