const DayInputComponent={name:"cron-expression-day-component",template:'<div>\n    <h5>Day</h5>\n      <div class="row">\n        <div class="col-md-6">\n          <div class="form-group" v-for="(item, index) in dayExpression">\n            <input type="radio" @change="apply" v-model="selectedRadio" v-bind:name="inputRadioName" v-bind:value="index" > {{item}}\n          </div>\n        </div>\n        <div class="col-md-6">\n            <div class="d-flex">\n                <input type="radio" @change="apply" v-model="selectedRadio" v-bind:name="inputRadioName" value="0" style="margin-right: 5px;">\n                <select v-bind:name="selectName" @change="applyByDays()" v-model="selectedDays" multiple size="10" class="form-control">\n                  <option v-for="day in days"  v-bind:value="day">\n                    {{day}}\n                  </option>\n                </select>\n            </div>\n        </div>\n      </div>\n    </div>',props:{dayExpression:{type:Object},inputRadioName:{type:String,default:"dayExpression"},selectName:{type:String,default:"selectedDays[]"},expressionFormat:{type:Object},defaultInputRadio:{type:Number,required:!0}},data:()=>({selectedRadio:"",selectedDays:[]}),computed:{days:function(){let e=[];for(let t=1;t<=31;t++)e.push(t);return e}},methods:{getFormatByValue(e){return e in this.expressionFormat?this.expressionFormat[e]:this.getFormatByDays()},getFormatByDays(){let e=0,t="",s=0,i=[];return this.selectedDays.forEach((a,n)=>{if(0===e?(t+=a.toString(),i.push(a)):e+1!==a?(t+=","+a,s=0,i=[a]):e+1===a&&s<1?(s++,i.push(a)):i.push(a),i.length>2){let e=/\d+(?=\D*$)/g.exec(t);t=t.replace(e[0],"").slice(0,-1),t+="-"+i[i.length-1]}else 2===i.length&&(t+=","+a);if(t.indexOf("-")>0&&t.indexOf(",")>0){console.log(t);let e=t.split(",");t="",e.forEach((e,s)=>{if(e.indexOf("-")>0){let i=e.split("-");for(let e=parseInt(i[0]);e<=parseInt(i[1]);e++)t+=","+e;0==s&&(t=t.slice(1))}else t+=0==s?e:","+e})}e=a}),t},applyByDays(){this.selectedRadio=0,this.apply()},apply(){this.$root.generate()},parse(e){if(!e)return this.selectedRadio="",this.selectedDays=[],!1;let t=Object.keys(this.expressionFormat).find(t=>this.expressionFormat[t]===e);t in this.expressionFormat?this.setRadioBtnByExpression(t):this.setSelectedInputValue(e)},setRadioBtnByExpression(e){this.selectedRadio=e},setSelectedInputValue(e){this.selectedDays=[];let t=e.split(",");console.log(t),t.forEach((e,t)=>{if(e)if(e.indexOf("-")>0)for(var s=e.split("-"),i=parseInt(s[0]);i<=parseInt(s[1]);i++)this.selectedDays.push(i);else this.selectedDays.push(e)}),console.log(this.selectedDays),this.selectedRadio=0}},created(){this.selectedRadio=this.defaultInputRadio}},MonthInputComponent={name:"cron-expression-month-component",template:'<div>\n    <h5>Month</h5>\n      <div class="row">\n        <div class="col-md-6">\n          <div class="form-group" v-for="(item, index) in monthExpression">\n            <input type="radio" @change="apply" v-model="selectedRadio" v-bind:name="inputRadioName" v-bind:value="index" > {{item}}\n          </div>\n        </div>\n        <div class="col-md-6">\n            <div class="d-flex">\n                <input type="radio" @change="apply" v-model="selectedRadio" v-bind:name="inputRadioName" value="0" style="margin-right: 5px;">\n                <select v-bind:name="selectName" @change="applyByMonths()" v-model="selectedMonths" multiple size="10" class="form-control">\n                  <option v-for="(month, index) in months"  v-bind:value="index+1">\n                    {{month}}\n                  </option>\n                </select>\n            </div>\n        </div>\n      </div>\n    </div>',props:{monthExpression:{type:Object},inputRadioName:{type:String,default:"monthExpression"},selectName:{type:String,default:"selectedMonths[]"},expressionFormat:{type:Object},defaultInputRadio:{type:Number,required:!0}},data:()=>({selectedRadio:"",selectedMonths:[]}),computed:{months:function(){return["January","February","March","April","May","June","July","August","September","October","November","December"]}},methods:{getFormatByValue(e){return e in this.expressionFormat?this.expressionFormat[e]:this.getFormatByMonths()},getFormatByMonths(){let e=0,t="",s=0,i=[];return this.selectedMonths.forEach((a,n)=>{if(0===e?(t+=a.toString(),i.push(a)):e+1!==a?(t+=","+a,s=0,i=[a]):e+1===a&&s<1?(s++,i.push(a)):i.push(a),i.length>2){let e=/\d+(?=\D*$)/g.exec(t);t=t.replace(e[0],"").slice(0,-1),t+="-"+i[i.length-1]}else 2===i.length&&(t+=","+a);e=a}),t},applyByMonths(){this.selectedRadio=0,this.apply()},apply(){this.$root.generate()},parse(e){if(!e)return this.selectedRadio="",this.selectedMonths=[],!1;let t=Object.keys(this.expressionFormat).find(t=>this.expressionFormat[t]===e);t in this.expressionFormat?this.setRadioBtnByExpression(t):this.setSelectedInputValue(e)},setRadioBtnByExpression(e){this.selectedRadio=e},setSelectedInputValue(e){this.selectedMonths=[],e.split(",").forEach((e,t)=>{if(e.indexOf("-")>0)for(var s=e.split("-"),i=parseInt(s[0]);i<=parseInt(s[1]);i++)this.selectedMonths.push(i);else this.selectedMonths.push(e)}),this.selectedRadio=0}},created(){this.selectedRadio=this.defaultInputRadio}},WeekdayInputComponent={name:"cron-expression-weekday-component",template:'<div>\n    <h5>Weekday</h5>\n      <div class="row">\n        <div class="col-md-6">\n          <div class="form-group" v-for="(item, index) in weekdayExpression">\n            <input type="radio" @change="apply" v-model="selectedRadio" v-bind:name="inputRadioName" v-bind:value="index" > {{item}}\n          </div>\n        </div>\n        <div class="col-md-6">\n            <div class="d-flex">\n                <input type="radio" @change="apply" v-model="selectedRadio" v-bind:name="inputRadioName" value="0" style="margin-right: 5px;">\n                <select v-bind:name="selectName" @change="applyByweekdays()" v-model="selectedweekdays" multiple size="10" class="form-control">\n                  <option v-for="(weekday, index) in weekdays"  v-bind:value="index+1">\n                    {{weekday}}\n                  </option>\n                </select>\n            </div>\n        </div>\n      </div>\n    </div>',props:{weekdayExpression:{type:Object},inputRadioName:{type:String,default:"weekdayExpression"},selectName:{type:String,default:"selectedweekdays[]"},expressionFormat:{type:Object},defaultInputRadio:{type:Number,required:!0}},data:()=>({selectedRadio:"",selectedweekdays:[]}),computed:{weekdays:function(){return["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]}},methods:{getFormatByValue(e){return e in this.expressionFormat?this.expressionFormat[e]:this.getFormatByweekdays()},getFormatByweekdays(){let e=0,t="",s=0,i=[];return this.selectedweekdays.forEach((a,n)=>{if(0===e?(t+=a.toString(),i.push(a)):e+1!==a?(t+=","+a,s=0,i=[a]):e+1===a&&s<1?(s++,i.push(a)):i.push(a),i.length>2){let e=/\d+(?=\D*$)/g.exec(t);t=t.replace(e[0],"").slice(0,-1),t+="-"+i[i.length-1]}else 2===i.length&&(t+=","+a);e=a}),t},applyByweekdays(){this.selectedRadio=0,this.apply()},apply(){this.$root.generate()},parse(e){if(!e)return this.selectedRadio="",this.selectedweekdays=[],!1;let t=Object.keys(this.expressionFormat).find(t=>this.expressionFormat[t]===e);t in this.expressionFormat?this.setRadioBtnByExpression(t):this.setSelectedInputValue(e)},setRadioBtnByExpression(e){this.selectedRadio=e},setSelectedInputValue(e){this.selectedweekdays=[],e.split(",").forEach((e,t)=>{if(e.indexOf("-")>0)for(var s=e.split("-"),i=parseInt(s[0]);i<=parseInt(s[1]);i++)this.selectedweekdays.push(i);else this.selectedweekdays.push(e)}),this.selectedRadio=0}},created(){this.selectedRadio=this.defaultInputRadio}},YearInputComponent={name:"cron-expression-year-component",template:'<div>\n    <h5>Year</h5>\n      <div class="row">\n        <div class="col-md-6">\n          <div class="form-group" v-for="(item, index) in yearExpression">\n            <input type="radio" @change="apply" v-model="selectedRadio" v-bind:name="inputRadioName" v-bind:value="index" > {{item}}\n          </div>\n        </div>\n        <div class="col-md-6">\n            <div class="d-flex">\n                <input type="radio" @change="apply" v-model="selectedRadio" v-bind:name="inputRadioName" value="0" style="margin-right: 5px;">\n                <select v-bind:name="selectName" @change="applyByYears()" v-model="selectedyears" multiple size="10" class="form-control">\n                  <option v-for="(year, index) in years"  v-bind:value="year">\n                    {{year}}\n                  </option>\n                </select>\n            </div>\n        </div>\n      </div>\n    </div>',props:{yearExpression:{type:Object},inputRadioName:{type:String,default:"yearExpression"},selectName:{type:String,default:"selectedyears[]"},expressionFormat:{type:Object},defaultInputRadio:{type:Number,required:!0},years:{type:Array,default:[]}},data:()=>({selectedRadio:"",selectedyears:[]}),methods:{getFormatByValue(e){return e in this.expressionFormat?this.expressionFormat[e]:this.getFormatByyears()},getFormatByyears(){let e=0,t="",s=0,i=[];return this.selectedyears.forEach((a,n)=>{if(0===e?(t+=a.toString(),i.push(a)):e+1!==a?(t+=","+a,s=0,i=[a]):e+1===a&&s<1?(s++,i.push(a)):i.push(a),i.length>2){let e=/\d+(?=\D*$)/g.exec(t);t=t.replace(e[0],"").slice(0,-1),t+="-"+i[i.length-1]}else 2===i.length&&(t+=","+a);e=a}),t},applyByYears(){this.selectedRadio=0,this.apply()},apply(){this.$root.generate()},parse(e){if(!e)return this.selectedRadio="",this.selectedyears=[],!1;let t=Object.keys(this.expressionFormat).find(t=>this.expressionFormat[t]===e);t in this.expressionFormat?this.setRadioBtnByExpression(t):this.setSelectedInputValue(e)},setRadioBtnByExpression(e){this.selectedRadio=e},setSelectedInputValue(e){this.selectedyears=[],e.split(",").forEach((e,t)=>{if(e.indexOf("-")>0)for(var s=e.split("-"),i=parseInt(s[0]);i<=parseInt(s[1]);i++)this.selectedyears.push(i);else this.selectedyears.push(e)}),this.selectedRadio=0}},created(){this.selectedRadio=this.defaultInputRadio}};function initCronExpressionApp(e,t){Vue.createApp({components:{"day-input":DayInputComponent,"month-input":MonthInputComponent,"weekday-input":WeekdayInputComponent,"year-input":YearInputComponent},data:()=>({expression:""}),computed:{getDayFormat(){return this.$refs.day.getFormatByValue(this.$refs.day.selectedRadio)},getMonthFormat(){return this.$refs.month.getFormatByValue(this.$refs.month.selectedRadio)},getWeekdayFormat(){return this.$refs.weekday.getFormatByValue(this.$refs.weekday.selectedRadio)},getYearFormat(){return this.$refs.year.getFormatByValue(this.$refs.year.selectedRadio)}},methods:{generate(){let e=this.getDayFormat,t=this.getMonthFormat,s=this.getWeekdayFormat,i=this.getYearFormat;this.expression=e+" "+t+" "+s+" "+i},parse(){let e=this.expression.replace(/  +/g," ").split(" ");this.$refs.day.parse(e[0]||""),this.$refs.month.parse(e[1]||""),this.$refs.weekday.parse(e[2]||""),this.$refs.year.parse(e[3]||"")}},mounted(){t?(this.expression=t,this.parse()):this.generate()}}).mount("#"+e)}